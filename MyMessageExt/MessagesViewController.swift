//
//  MessagesViewController.swift
//  MyMessageExt
//
//  Created by Bill Martensson on 2020-12-18.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    
    @IBOutlet weak var theLabel: UILabel!
    @IBOutlet weak var theTextfield: UITextField!
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    
    
    @IBAction func letsSendMessage(_ sender: Any) {
        
        // https://www.fruit.com/apple?product=1&type=fancy
        
        
        let layout = MSMessageTemplateLayout()
        
        layout.caption = "Banan"
        
        var components = URLComponents()
        let fruitname = URLQueryItem(name: "fruit", value: "banana")
        
        components.queryItems = [fruitname]
        
        
        var currentSession = MSSession()
        
        if let existingSession = activeConversation!.selectedMessage?.session {
            currentSession = existingSession
        }
        
        
        let message = MSMessage(session: currentSession)
        message.layout = layout
        message.url = components.url // ?fruit=banana
        
        //activeConversation!.insert(message, completionHandler: nil)
        activeConversation!.send(message, completionHandler: nil)
        
        
    }
    
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        print("willBecomeActive")

        if let message = conversation.selectedMessage {
            let layout = message.layout! as! MSMessageTemplateLayout
            
            print(layout.caption)
            
        }
        
        
        
        
        
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        
        if(message.senderParticipantIdentifier == conversation.localParticipantIdentifier)
        {
            // SKICKAT TILL OSS SJÄLVA
        } else {
            // NÅGON ANNAN SKICKAT
        }
        
        
        print("didReceive")
        let layout = message.layout! as! MSMessageTemplateLayout
        
        print(layout.caption)
        
        theLabel.text = layout.caption
        
        print(message.url) // ?fruit=banana&amount=7
        
        // fruit=banana
        // amount=7
        
        var messageData = [String:String]()
        if let urlstring = message.url?.absoluteString {
            var urlParts = urlstring.replacingOccurrences(of: "?", with: "").components(separatedBy: "&")
            for urlpart in urlParts
            {
                var keyvalue = urlpart.components(separatedBy: "=")
                print(keyvalue[0] + " is " + keyvalue[1])
                messageData[keyvalue[0]] = keyvalue[1]
            }
        }
        
        print(messageData["fruit"])
        
        
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        
        if(presentationStyle == .compact)
        {
            print("didTransition compact")
        }
        
        if(presentationStyle == .expanded)
        {
            print("didTransition expanded")
        }
        if(presentationStyle == .transcript)
        {
            print("didTransition transcript")
        }
        
        
        
    }

}
